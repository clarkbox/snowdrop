{
  "name": "rsync",
  "version": "0.0.1",
  "description": "Rsync cli wrapper",
  "main": "rsync.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mattijs/node-rsync"
  },
  "keywords": [
    "rsync",
    "wrapper",
    "cli",
    "command"
  ],
  "author": {
    "name": "Mattijs Hoitink",
    "email": "mattijs@monkeyandmachine.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# Rsync\n\n## Installation\n\nInstallation goes through NPM:\n\n```\n$ npm install rsync\n```\n\n## License\n\nThis module is licensed under the MIT License. See the `LICENSE` file for more details.\n\n## Simple usage\n\n```javascript\nvar Rsync = require('rsync');\n\n// Build the command\nvar rsync = new Rsync()\n  .shell('ssh')\n  .flags('az')\n  .source('/path/to/source')\n  .destination('server:/path/to/destination');\n\n// Execute the command\nrsync.execute(function(error, stdout, stderr) {\n    // we're done\n});\n```\n\nFor more examples see the `examples` directory.\n\n# API\n\n  * [constructor](#constructor)\n  * [instance methods](#instance-methods)\n  * [accessor methods](#accessor-methods)\n  * [static methods](#static-methods)\n\n## constructor\n\nConstruct a new Rsync command instance. The constructor takes no arguments.\n\n```javascript\nvar rsync = new Rsync();\n```\n\n## instance methods\n\n### set(option, value)\n\nSet an option. This can be any option from the rsync manual. The value is optional and only applies to options that take a value. This is not checked however. Supplying a value for an option that does not take a value will append the value regardless. This may cause errors when the command is executed.\n\n```javascript\nrsync.set('a')\n  .set('progress')\n  .set('list-only')\n  .set('exclude-from', '/path/to/exclude-file');\n```\n\nOptions must be unique and setting the same option twice will override any existing value. For options that can be set multiple times special methods exist (see accessor methods). Any leading dashes (-) are stripped when setting the option.\n\nThe `set` method is chainable.\n\n### unset(option)\n\nUnset an option. Any leading dashes (-) are stripped when unsetting an option.\n\n```javascript\nrsync.unset('progress')\n  .unset('quiet');\n```\n\nThe `unset` method is chainable.\n\n### flags(flags, set)\n\nSet one or more flags. Flags are single letter options without a value, for example _compress_ (`-z`) or _archive_ (`-a`).\n\nThe `flags` method is a polymorphic function: it can take different arguments to set flags.\nFlags can be presented as a single string with multiple flags, multiple strings as arguments, an array containing strings or an object with the flags as keys.\n\nWhether the presented flags need to be set or unset is determined based on the last argument, if this is a Boolean. When presenting the flags as an Object the value for each key (flag) determines if the flag is set or unset. This version can be used to mix setting and unsetting of flags in one statement.\n\n```javascript\n// As String\nrsync.flags('avz');        // set\nrsync.flags('avz', false); // unset\n\n// As String arguments\nrsync.flags('a', 'v', 'z');        // set\nrsync.flags('a', 'v', 'z', false); // unset\n\n// As Array\nrsync.flags(['a', 'v', 'z']);   // set\nrsync.flags(['a', 'z'], false); // unset\n\n// As Object\nrsync.flags({\n  'a': true, // set\n  'z': true, // set\n  'v': false // unset\n});\n```\n\nThe `flags` method is chainable.\n\n### isSet(option)\n\nCheck if an option is set.\n\nThis method does not check alternate versions for an option. When an option is set as the short version this method will still return `false` when checking for the long version, event though they are the same option.\n\n```javascript\nrsync.set('quiet');\nrsync.isSet('quiet'); // is TRUE\nrsync.isSet('q');     // is FALSE\n```\n\n### option(option)\n\nGet the value for an option by name. If a valueless option is requested null will be returned.\n\n```javascript\nrsync.option('rsh');      // returns String value\nrsync.option('progress'); // returns NULL\n```\n\n### args()\n\nGet the arguments list for the command that is going to be executed. Returns an Array with the complete options that will be passed to the command.\n\n### command()\n\nGet the complete command that is going to be executed.\n\n```javascript\nvar rsync = new Rsync()\n  .shell('ssh')\n  .flags('az')\n  .source('/p/t/source')\n  .destination('server:/p/t/dest');\n\nvar c = rsync.command();\n// c is \"rsync -az --rsh=\"ssh\" /p/t/source server:/p/t/dest\n```\n### execute(callback)\n\nExecuted the command.\n\n## option shorthands\n\nThe following option shorthand methods are available:\n\n  - **shell(value)**: `--rsh=SHELL`\n  - **progress()**: `--progress`\n  - **archive()**: `-a`\n  - **compress()**: `-z`\n  - **recursive()**: `-r`\n  - **update()**: `-u`\n  - **quiet()**: `-q`\n  - **dirs()**: `-d`\n  - **links()**: `-l`\n  - **dry()**: `-n`\n\nAll shorthand methods are chainable as long as options that require a value are provided with one.\n\n## accessor methods\n\nThese methods can be used to get or set values in a chainable way. When the methods are called without arguments the current value is returned. When the methods are called with a value this will override the current value and the Rsync instance is returned to provide the chainability.\n\n### executable(executable)\n\nGet or set the executable to use as the rsync command.\n\n### destination(destination)\n\nGet or set the destination for the rsync command.\n\n### source(source)\n\nGet or set the source or sources for the rsync command. When this method is called multiple times with a value it is appended to the list of sources. It is also possible to present the list of source as an array where each value will be appended to the list of sources\n\n```javascript\n// chained\nrsync.source('/a/path')\n  .source('/b/path');\n\n// as Array\nrsync.source(['/a/path', '/b/path']);\n```\n\nIn both cases the list of sources will contain two paths.\n\n### exclude(pattern)\n\nExclude a pattern from transfer. When this method is called multiple times with a value it is appended to the list of excluded patterns. It is also possible to present the list of excluded patterns as an array where each pattern will be appended to the list.\n\n```javascript\n// chained\nrsync.exclude('.git')\n  .exclude('.DS_Store');\n\n// as Array\nrsync.exclude(['.git', '.DS_Store']);\n```\n\n### include(pattern)\n\nInclude a pattern for transfer. When this method is called multiple times with a value it is appended to the list of included patterns. It is also possible to present the list of included patterns as an array where each pattern will be appended to the list.\n\n```javascript\n// chained\nrsync.include('/a/file')\n  .include('/b/file');\n\n// as Array\nrsync.include(['/a/file', '/b/file']);\n```\n\n### debug(flag)\n\nGet or set the debug flag. This is only used internally and must be a Boolean to set or unset.\n\n## static methods\n\n### build\n\nFor convenience there is the `build` function on the Rsync contructor. This function can be\nused to create a new Rsync command instance from an options object.\n\nFor each key in the options object the corresponding method on the Rsync instance will be\ncalled. When a function for the key does not exist it is ignored. An existing Rsync instance\ncan optionally be provided.\n\n```javascript\nvar rsync = Rsync.build({\n  source:      '/path/to/source',\n  destination: 'server:/path/to/destination',\n  exclude:     ['.git'],\n  flags:       'avz',\n  shell:       'ssh'\n});\n\nrsync.execute(function(error, stdout, stderr) {\n  // we're done\n});\n```\n\n# Development\n\nIf there is something missing (which there probably is) just fork, patch and send a pull request.\n\nFor adding a new shorthand method there are a few simple steps to take:\n- Fork\n- Add the option through the `exposeShortOption` or `exposeLongOption` functions. For examples see the source file.\n- Update this README file to list the new shorthand method\n- Make a pull request\n\nWhen adding a shorthand make sure it does not already exist, it is a sane name and a shorthand is necessary.\n\nIf there is something broken (which there probably is), the same applies: fork, patch, pull request. Opening an issue is also possible.\n",
  "_id": "rsync@0.0.1",
  "dist": {
    "shasum": "9455ca4c4cfd1a9c4657ab45aac19ea4ca92b65b"
  },
  "_from": "rsync@",
  "_resolved": "https://registry.npmjs.org/rsync/-/rsync-0.0.1.tgz"
}
